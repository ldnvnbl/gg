// ggArgs targetPath: ./api/{{toSnake .ObjectName}}.go
package api

import (
    "net/http"

	"github.com/gin-gonic/gin"

    {{.HttputilPackage}}
    "{{.Module}}/proto"
)


// Add{{toCamel .ObjectName}}
// @Summary Create {{toCamel .ObjectName}}
// @Tags {{toCamel .ObjectName}}
// @Produce json
// @Param {{toCamel .ObjectName}} body proto.{{toCamel .ObjectName}} true "{{toCamel .ObjectName}}"
// @Success 200 {object} proto.{{toCamel .ObjectName}} "success"
// @Success 400 {object} httputil.HTTPError "failed"
// @Router /api/v1/{{toLowerCamel .ObjectName}}s [POST]
func (p *server) Add{{toCamel .ObjectName}}(c *gin.Context) {
    session := proto.GetSession(c)
    {{toLowerCamel .ObjectName}} := &proto.{{toCamel .ObjectName}}{}
    err := c.BindJSON({{toLowerCamel .ObjectName}})
  	if err != nil {
   		httputil.RespondWithBadRequestMessage(c, "bind {{toLowerCamel .ObjectName}} failed")
   		return
   	}
   	{{toLowerCamel .ObjectName}}, err = p.Kernel.{{toCamel .ObjectName}}Service.Add{{toCamel .ObjectName}}(c, session.Uid, {{toLowerCamel .ObjectName}})
   	if err != nil {
   		httputil.RespondWithError(c, err)
   		return
   	}
   	c.JSON(http.StatusOK, {{toLowerCamel .ObjectName}})
}

// Delete{{toCamel .ObjectName}}ById
// @Summary Delete {{toCamel .ObjectName}} By {{toLowerCamel .ObjectIdName}}
// @Tags {{toCamel .ObjectName}}
// @Produce json
// @Param {{toLowerCamel .ObjectIdName}} path string true "{{toLowerCamel .ObjectIdName}}"
// @Success 200 {object} proto.{{toCamel .ObjectName}} "success"
// @Success 400 {object} httputil.HTTPError "failed"
// @Router /api/v1/{{toLowerCamel .ObjectName}}s/:{{toLowerCamel .ObjectIdName}} [DELETE]
func (p *server) Delete{{toCamel .ObjectName}}ById(c *gin.Context) {
    session := proto.GetSession(c)
    {{toLowerCamel .ObjectIdName}} := c.Param("{{toLowerCamel .ObjectIdName}}")
    err := p.Kernel.{{toCamel .ObjectName}}Service.Delete{{toCamel .ObjectName}}ById(c, session.Uid, {{toLowerCamel .ObjectIdName}})
   	if err != nil {
   		httputil.RespondWithError(c, err)
   		return
   	}
   	c.JSON(http.StatusOK, gin.H{})
}

// Update{{toCamel .ObjectName}}
// @Summary Update {{toCamel .ObjectName}}
// @Tags {{toCamel .ObjectName}}
// @Produce json
// @Param {{toLowerCamel .ObjectIdName}} path string true "{{toLowerCamel .ObjectIdName}}"
// @Param Update{{toCamel .ObjectName}}Request body proto.Update{{toCamel .ObjectName}}Request true "Update{{toCamel .ObjectName}}Request"
// @Success 200 {object} proto.{{toCamel .ObjectName}} "success"
// @Success 400 {object} httputil.HTTPError "failed"
// @Router /api/v1/{{toLowerCamel .ObjectName}}s/:{{toLowerCamel .ObjectIdName}} [POST]
func (p *server) Update{{toCamel .ObjectName}}(c *gin.Context) {
    session := proto.GetSession(c)
    req := &proto.Update{{toCamel .ObjectName}}Request{}
    err := c.BindJSON(req)
  	if err != nil {
   		httputil.RespondWithBadRequestMessage(c, "bind {{toLowerCamel .ObjectName}} failed")
   		return
   	}
   	{{toLowerCamel .ObjectName}}, err := p.Kernel.{{toCamel .ObjectName}}Service.Update{{toCamel .ObjectName}}(c, session.Uid, req)
   	if err != nil {
   		httputil.RespondWithError(c, err)
   		return
   	}
   	c.JSON(http.StatusOK, {{toLowerCamel .ObjectName}})
}

// Get{{toCamel .ObjectName}}ById
// @Summary Get {{toCamel .ObjectName}} By {{toLowerCamel .ObjectIdName}}
// @Tags {{toCamel .ObjectName}}
// @Produce json
// @Param {{toLowerCamel .ObjectIdName}} path string true "{{toLowerCamel .ObjectIdName}}"
// @Success 200 {object} proto.{{toCamel .ObjectName}} "success"
// @Success 400 {object} httputil.HTTPError "failed"
// @Router /api/v1/{{toLowerCamel .ObjectName}}s/:{{toLowerCamel .ObjectIdName}} [GET]
func (p *server) Get{{toCamel .ObjectName}}ById(c *gin.Context) {
    session := proto.GetSession(c)
    {{toLowerCamel .ObjectIdName}} := c.Param("{{toLowerCamel .ObjectIdName}}")
    {{toLowerCamel .ObjectName}}, err := p.Kernel.{{toCamel .ObjectName}}Service.Get{{toCamel .ObjectName}}ById(c, session.Uid, {{toLowerCamel .ObjectIdName}})
   	if err != nil {
   		httputil.RespondWithError(c, err)
   		return
   	}
   	c.JSON(http.StatusOK, {{toLowerCamel .ObjectName}})
}


type {{toLowerCamel .ObjectName}}ListResp struct {
	Pagination *httputil.Pagination `json:"pagination"`
	List       proto.{{toCamel .ObjectName}}List `json:"list"`
}

// Get{{toCamel .ObjectName}}List
// @Summary Get {{toCamel .ObjectName}} List
// @Tags {{toCamel .ObjectName}}
// @Produce json
// @Param pageToken query string false "Page Token"
// @Param size query integer false "Size"
// @Success 200 {object} {{toLowerCamel .ObjectName}}ListResp "success"
// @Success 400 {object} httputil.HTTPError "failed"
// @Router /api/v1/{{toLowerCamel .ObjectName}}s [GET]
func (p *server) Get{{toCamel .ObjectName}}List(c *gin.Context) {
    session := proto.GetSession(c)
    q := struct {
        httputil.PageQuery
    }{}

    err := c.BindQuery(&q)
    if err != nil {
        httputil.RespondWithBadRequestMessage(c, "bind query {{toLowerCamel .ObjectName}} params failed")
        return
    }
    q.Size = httputil.LimitQuerySize(q.Size)

    pageToken, err := httputil.DecodePageToken(q.PageToken)
    if err != nil {
        httputil.RespondWithBadRequestMessage(c, "invalid page token")
        return
    }
    {{toLowerCamel .ObjectName}}List, last{{toCamel .ObjectIdName}}, err := p.Kernel.{{toCamel .ObjectName}}Service.Get{{toCamel .ObjectName}}ListByUid(c, session.Uid, pageToken.GetCursorId(), q.Size)
   	if err != nil {
   		httputil.RespondWithError(c, err)
   		return
   	}
   	c.JSON(http.StatusOK, {{toLowerCamel .ObjectName}}ListResp{
   	    List: {{toLowerCamel .ObjectName}}List,
   	    Pagination: httputil.NewNextCursorPagination(last{{toCamel .ObjectIdName}}),
   	})
}