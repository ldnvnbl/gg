// ggArgs targetPath: ./service/{{toLower .ObjectName}}/service.go
package {{toLower .ObjectName}}

import (
	"context"
	"time"

	"github.com/redis/go-redis/v9"
	{{.DBPackage}}
    {{.LogPackage}}
    {{.HttputilPackage}}
	"go.uber.org/zap"

	"{{.Module}}/proto"
)

type service struct {
	cache  *cache
	{{toLowerCamel .ObjectName}}Model *{{toLowerCamel .ObjectName}}Model
	kernel *proto.Kernel
}

func New{{toCamel .ObjectName}}Service(redisCli *redis.Client, db *db2.Selector, kernel *proto.Kernel) proto.I{{toCamel .ObjectName}}Service {
	return &service{
		cache:  newCache(redisCli),
		{{toLowerCamel .ObjectName}}Model:  new{{toCamel .ObjectName}}Model(db),
		kernel: kernel,
	}
}

func (p *service) Add{{toCamel .ObjectName}}(ctx context.Context, uid string, {{toLowerCamel .ObjectName}} *proto.{{toCamel .ObjectName}}) (ret{{toCamel .ObjectName}} *proto.{{toCamel .ObjectName}}, err error) {
    {{toLowerCamel .ObjectName}}.Uid = uid
	{{toLowerCamel .ObjectName}}.{{toCamel .ObjectIdName}} = p.kernel.GUIDService.{{if eq .ObjectIdType "string"}}GetGUIDString(){{else if eq .ObjectIdType "uint64"}}GetGUID(){{end}}
    {{toLowerCamel .ObjectName}}.CreatedTime = time.Now().Unix()
    err = p.{{toLowerCamel .ObjectName}}Model.Add(ctx, {{toLowerCamel .ObjectName}})
	if err != nil {
		log.Error(ctx, "model.Add{{toCamel .ObjectName}} failed", zap.Error(err))
		return
	}
	return {{toLowerCamel .ObjectName}}, nil
}

func (p *service) Delete{{toCamel .ObjectName}}ById(ctx context.Context, uid string, {{toLowerCamel .ObjectIdName}} {{.ObjectIdType}}) (err error) {
    {{toLowerCamel .ObjectName}}, err := p.{{toLowerCamel .ObjectName}}Model.GetByPK(ctx, {{toLowerCamel .ObjectIdName}}, false)
	if err != nil {
		log.Error(ctx, "model.Get {{toCamel .ObjectName}} by pk failed", zap.Error(err))
		return
	}

	if {{toLowerCamel .ObjectName}}.Uid != uid {
	    err = httputil.NewBadRequestError(httputil.APICodePermissionDenied, fmt.Errorf("invalid {{toLowerCamel .ObjectIdName}}"))
        return
    }

	err = p.{{toLowerCamel .ObjectName}}Model.DeleteByPK(ctx, {{toLowerCamel .ObjectIdName}})
	if err != nil {
		log.Error(ctx, "model delete {{toCamel .ObjectName}} by pk failed", zap.Error(err))
		return
	}
	return
}

func (p *service) Update{{toCamel .ObjectName}}(ctx context.Context, uid string, updateRequest *proto.Update{{toCamel .ObjectName}}Request) ({{toLowerCamel .ObjectName}} *proto.{{toCamel .ObjectName}}, err error) {
    return
}

func (p *service) Get{{toCamel .ObjectName}}ById(ctx context.Context, uid string, {{toLowerCamel .ObjectIdName}} {{.ObjectIdType}}) ({{toLowerCamel .ObjectName}} *proto.{{toCamel .ObjectName}}, err error) {
	{{toLowerCamel .ObjectName}}, err = p.{{toLowerCamel .ObjectName}}Model.GetByPK(ctx, {{toLowerCamel .ObjectIdName}}, false)
	if err != nil {
		log.Error(ctx, "model.Get {{toCamel .ObjectName}} by pk failed", zap.Error(err))
		return
	}

	if {{toLowerCamel .ObjectName}} == nil {
	    err = httputil.NewBadRequestError(httputil.APICodeNotFound, fmt.Errorf("{{toLowerCamel .ObjectName}} not found"))
        return
	}
	return
}

func (p *service) Get{{toCamel .ObjectName}}ListByUid(ctx context.Context, uid string, cursor{{toCamel .ObjectIdName}} {{.ObjectIdType}}, size int) ({{toLowerCamel .ObjectName}}List proto.{{toCamel .ObjectName}}List, last{{toCamel .ObjectIdName}} {{.ObjectIdType}}, err error) {
    {{toLowerCamel .ObjectName}}List, err = p.{{toLowerCamel .ObjectName}}Model.Get{{toCamel .ObjectName}}ListByUid(ctx, uid, cursor{{toCamel .ObjectIdName}}, size, false)
    if err != nil {
        log.Error(ctx, "{{toLowerCamel .ObjectName}}Model.Get{{toCamel .ObjectName}}ListByUid failed", zap.Error(err))
        return
    }
    if len({{toLowerCamel .ObjectName}}List) > 0 {
        last{{toCamel .ObjectIdName}} = {{toLowerCamel .ObjectName}}List[len({{toLowerCamel .ObjectName}}List)-1].{{toCamel .ObjectIdName}}
    }
    return
}